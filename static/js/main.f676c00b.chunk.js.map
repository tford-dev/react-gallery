{"version":3,"sources":["Components/Nav.js","Components/Search.js","Components/Photo.js","Components/NotFound.js","Components/PhotoContainer.js","Components/Error.js","App.js","config.js","Components/Paths.js","reportWebVitals.js","index.js"],"names":["Nav","props","calling","funcCall","className","onClick","to","Search","history","useHistory","ref","useRef","onSubmit","e","preventDefault","push","current","value","onSearch","type","name","placeholder","required","fill","height","viewBox","width","xmlns","d","Photo","src","url","alt","NotFound","PhotoContainer","query","window","location","pathname","indexOf","slice","length","updatedQuery","split","join","picsData","picResults","data","map","picData","server","id","secret","Error","App","performSearch","axios","get","then","response","setState","photos","photo","isLoading","catch","error","console","log","state","this","onpopstate","reload","Component","Paths","exact","path","component","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f676c00b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  NavLink,\r\n  BrowserRouter as Router\r\n} from \"react-router-dom\";\r\n\r\n//I added an even listener to each <li></li> element so an assigned function can be called when clicked\r\nconst Nav = (props) =>{\r\n    const calling = props.funcCall;\r\n    return(\r\n        <Router>\r\n            <nav className=\"main-nav\">\r\n                <ul>\r\n                    <li onClick={calling}><NavLink to=\"/street-bmx\">BMX</NavLink></li>\r\n                    <li onClick={calling}><NavLink to=\"/dogs\">Dogs</NavLink></li>\r\n                    <li onClick={calling}><NavLink to=\"/legos\">Legos</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React, { useRef } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Search = (props) => {\r\n    let history = useHistory();\r\n    const ref = useRef();\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //history.push(...) adds the search term to url which is then used as the search term in performSearch from App.js\r\n        history.push(`/search/${ref.current.value}`)\r\n        props.onSearch(ref.current.value);\r\n        ref.current.value = \"\";\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {/*handleSumbit is called after form is submitted which then calls performSearch in App.js*/}\r\n            <form className=\"search-form\" onSubmit={handleSubmit} >\r\n                <input type=\"text\" name=\"search\" placeholder=\"Search\" ref={ref} required />\r\n                    <button type=\"submit\" className=\"search-button\">\r\n                        <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                        <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                        </svg>\r\n                    </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst Photo = (props) => {\r\n    return(\r\n        <li>\r\n            <img src={props.url} alt=\"\"/>\r\n        </li>\r\n    )\r\n}\r\nexport default Photo;","import React from 'react';\r\n\r\nconst NotFound = () =>{\r\n    return(\r\n        <li className=\"not-found\">\r\n            <h2>No Results Found</h2>\r\n            <p>Your search did not return any results. Please try again.</p>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import React from 'react'\r\nimport Photo from \"./Photo\";\r\nimport NotFound from \"./NotFound\";\r\n\r\nconst PhotoContainer = (props) => {\r\n    /* I am aware this is a repeat of code from performSearch from App.js, however the purpose of this additional\r\n    code is to display the message \"Results For {insert search term here}\" after performSearch has been called */\r\n    const url = window.location.pathname;\r\n    let query;\r\n    if(url.indexOf(\"/search/\") !== -1){\r\n      query = url.slice(8, url.length);\r\n    } else {\r\n      query = url.slice(1, url.length);\r\n    }\r\n    //This if statement replaces \"%20\" from search term in url with \" \"\r\n    if(query.indexOf(\"%20\") !== -1){\r\n        let updatedQuery = query.split(\"%20\").join(\" \");\r\n        query = updatedQuery;\r\n    }\r\n    const picResults = props.data;\r\n    let picsData;\r\n\r\n    //This if statement gathers image data assuming there is data to be displayed, if not, the NotFound component gets displayed\r\n    if(picResults.length > 0){\r\n        picsData = picResults.map(picData => \r\n            <Photo url={`https://live.staticflickr.com/${picData.server}/${picData.id}_${picData.secret}_w.jpg`} key={picData.id}/>    \r\n        );\r\n    } else {\r\n        picsData = <NotFound />;\r\n    }\r\n\r\n    return(\r\n        <div className=\"photo-container\">\r\n            {\r\n            //I used the ternary operator to display the a \"Results For ...\" message after performSearch is called in App.js    \r\n            (query.length > 0)\r\n                ? <h2>Results For \"{<em>{query}</em>}\"</h2>\r\n                : null\r\n            }\r\n\r\n            {/*The images from data retrieved are li elements from Photo.js*/}\r\n            <ul>\r\n                {picsData}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PhotoContainer;\r\n","import React from 'react';\r\n\r\nconst Error = () =>{\r\n    return(\r\n        <div>\r\n            <h2>Something went wrong!</h2>\r\n            <p>Sorry, we can't find the page you're looking for.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error;","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport './css/index.css';\r\nimport apiKey from \"./config\";\r\n\r\n//App components\r\nimport Nav from \"./Components/Nav\";\r\nimport Search from \"./Components/Search\";\r\nimport PhotoContainer from \"./Components/PhotoContainer\";\r\nimport NotFound from './Components/NotFound';\r\nimport Error from './Components/Error';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      picsData: [],\r\n      isLoading: true,\r\n    }\r\n  }\r\n\r\n  //The performSearch method of the component uses parts of the url at the top of the browser for searching\r\n  performSearch = () =>{\r\n    const url = window.location.pathname;\r\n    let query;\r\n    //I used index slicing to use parts of the url for searching\r\n    if(url.length > 1){\r\n      if(url.indexOf(\"/search/\") !== -1){\r\n        query = url.slice(8, url.length);\r\n      } else {\r\n        query = url.slice(1, url.length);\r\n      }\r\n    } else {\r\n      //query is assigned a default term for when the page first loads\r\n      query=\"amg\"\r\n    }\r\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=16&page=1&format=json&nojsoncallback=1`)\r\n    .then((response)=>{\r\n      this.setState({\r\n        picsData: response.data.photos.photo,\r\n        isLoading: false,\r\n      });\r\n    })\r\n    .catch((error)=>{\r\n      console.log(\"Error fetching and parsing data\", error);\r\n      this.setState({picsData: <NotFound />})\r\n    });\r\n  }\r\n\r\n  //componentDidMount is used to call performSearch for when the app is first loaded\r\n  componentDidMount(){\r\n  this.performSearch();\r\n  }\r\n\r\n  render(){\r\n    //window.onpopstate is used to refresh the page when the forward or back button is pushed in the browser\r\n    window.onpopstate = (e) => {\r\n      window.location.reload();\r\n    };\r\n    \r\n    return (\r\n      <div className=\"container\">\r\n        <Search onSearch={this.performSearch} />\r\n\r\n        {/*performSearch is called when a Nav li element is clicked*/}\r\n        <Nav funcCall={this.performSearch} />\r\n\r\n        {\r\n          //If data is loading, \"loading...\" will appear before data is retrieved\r\n          (window.location.pathname !== \"/error\")\r\n            ? (this.state.isLoading)\r\n                ? <h3>Loading...</h3>\r\n                :  <PhotoContainer data={this.state.picsData} />\r\n            //If data cannot be retrieved, then the Error component will be rendered\r\n            : <Error />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const apiKey = \"00ed164981abeecf2ba60d21b27cc931\";\r\n//Secret: 730daf2b6e937e2c\r\nexport default apiKey;","import React from 'react'\r\nimport {BrowserRouter as Router, Route, Switch, Redirect} from \"react-router-dom\";\r\n//App components\r\nimport App from \"../App\";\r\n\r\nconst Paths = () =>{\r\n    return(\r\n    <Router>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route path=\"/search/:id\" component={App} />\r\n            <Route path=\"/street-bmx\" component={App} />\r\n            <Route path=\"/dogs\" component={App} />\r\n            <Route path=\"/legos\" component={App} />\r\n            <Route path=\"/error\" component={App} />\r\n            <Redirect from=\"*\" to=\"/error\" />\r\n        </Switch>\r\n    </Router>\r\n    )\r\n};\r\n\r\nexport default Paths;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Paths from \"./Components/Paths\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n//I chose the paths component to render as it holds the routes for each component of this project\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Paths />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}